#PREPROCESSING CODE

import cv2,os
import numpy as np
import matplotlib.image as img
# reading the image
testImage = img.imread('C:\\Users\\k siresha\\OneDrive\\Desktop\\data_subset\\images\\train\\CLEVR_train_000000.png')
print(testImage)
import matplotlib.pyplot as plt
print(testImage.shape) # displaying the shape of the image
modifiedImage = testImage[:, :, :] # modifying the shape of the image
plt.imshow(modifiedImage) # displaying the modified image

data_path=r'C:\Users\k siresha\OneDrive\Desktop\data_subset\images'
categories=os.listdir(data_path)
labels=[i for i in range(len(categories))]

label_dict=dict(zip(categories,labels)) 

print(label_dict)
print(categories)
print(labels)

img_size = 200
imagedata = []
tlabel = []

for category in categories:
    folder_path = os.path.join(data_path, category)
    img_names = os.listdir(folder_path)

    for img_name in img_names:
        img_path = os.path.join(folder_path, img_name)
        img = cv2.imread(img_path)

        try:
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            resized = cv2.resize(gray, (img_size, img_size))
            imagedata.append(resized)
            tlabel.append(label_dict[category])

        except Exception as e:
            print('Exception:', e)

import numpy as np

data=np.array(data_subset)
data=data/255
data=np.reshape(data,(data.shape[0],img_size,img_size,1))
target=np.array(target)

from keras.utils import np_utils

new_target=np_utils.to_categorical(target)

from sklearn.utils import shuffle
data,Label = shuffle(data,new_target, random_state=2)
train_data = [data,Label]

#one.py

import numpy as np
from matplotlib import pyplot as plt
plt.rcParams["figure.figsize"] = [7.00, 3.50]
plt.rcParams["figure.autolayout"] = True
im = plt.imread("img8.png")
fig, ax = plt.subplots()
im = ax.imshow(im, extent=[0, 300, 0, 300])
x = np.array(range(300))
ax.plot(x, x, ls='dotted', linewidth=2, color='red')
plt.show()

#two.py

import cv2
import numpy as np

img: None =cv2.imread('img8.png')
img =cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
#img= cv2.blur(img,(2,2))
#img = cv2.GaussianBlur(img, (5,5), 10)
#_,img =cv2.threshold(img, 25,255, cv2.THRESH_BINARY_INV)

img2 = cv2.erode(img,np.ones((8,8)),iterations=2)

while True:
    cv2.imshow('original',img)
    cv2.imshow('erode',img2)

    if cv2.waitKey(0) ==27:
        cv2.destroyAllWindows()
        break


